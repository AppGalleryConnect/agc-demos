import { AGCInstance, AGConnectOptions, AGConnectServicesConfig, Crypt } from '@agconnect/instance-types';
import { ServiceRepository } from '@agconnect/api-types';
import { Logger } from "@agconnect/log";
declare let instanceLogger: Logger;
declare class AGCInstanceImpl implements AGCInstance {
    repo_: ServiceRepository;
    name_: string;
    private appVersion;
    private _config;
    private _customCredentialsProvider;
    private _customAuthProvider;
    private cryptImpl;
    private option;
    constructor(repo: ServiceRepository, name?: string);
    name(): string;
    configInstance(config: AGConnectServicesConfig): AGCInstance;
    config(): AGConnectServicesConfig;
    setApiKey(apiKey: string): void;
    setClientSecret(clientSecret: string): void;
    setClientId(clientId: string): void;
    getService<T>(name: string): T | null;
    setCustomCredentialsProvider(customCredentialsProvider: any): boolean;
    setCustomAuthProvider(customAuthProvider: any): boolean;
    getCustomCredentialsProvider(): any;
    getCustomAuthProvider(): any;
    setCryptImp(cryptImpl: Crypt): boolean;
    setAppVersion(version: string): void;
    setOption(option: AGConnectOptions): void;
    private addHttpToUrl;
    getGwUrl(): string;
    getGwBackUrl(): string;
    getAppVersion(): string;
    getCryptImp(): any;
    private checkBeforeSetKey;
}
export { instanceLogger, AGCInstanceImpl };
